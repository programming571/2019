// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc571.IntialAttempt;

import org.usfirst.frc571.IntialAttempt.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Scheduler;

import org.usfirst.frc571.IntialAttempt.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick driveStick;
    public Joystick opStick;
    public JoystickButton turnRightButton, turnLeftButton;
    public JoystickButton homeButton;
    public JoystickButton shootCargoButton;
    public JoystickButton collectCargoButton;
    public JoystickButton rotatePanelLowButton, rotateLowBallButton, rotatePanelHighButton, rotateBallCargoButton;
    public JoystickButton pivotLeftButton, pivotRightButton;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public JoystickButton getEncoderCountButton;

    public OI() {
        // FOR ONE STICK ONLY
        driveStick = new Joystick(1); // ONE STICK ONLY
        opStick = new Joystick(0);

        // turnRightButton = new JoystickButton(driveStick, 4);
        // turnRightButton.whenPressed(new TurnTo(90.0));
        // turnLeftButton = new JoystickButton(driveStick, 3);
        // turnLeftButton.whenPressed(new TurnTo(-90.0));

        getEncoderCountButton = new JoystickButton(driveStick, 7);
        getEncoderCountButton.whenPressed(new GetEncoderCount());

        /************ Arm Comands ************/
        // Y Button - Home
        homeButton = new JoystickButton(opStick, 4);
        homeButton.whenPressed(new HomeArm());

        // A Button - Hatch Low
        rotatePanelLowButton = new JoystickButton(opStick, 1);
        rotatePanelLowButton.whenPressed(new RotateTo(93, 1));

        // X Button
        rotatePanelHighButton = new JoystickButton(opStick, 3);
        rotatePanelHighButton.whenPressed(new RotateTo(88, 3));

        // B Button - Ball Low
        rotateLowBallButton = new JoystickButton(opStick, 2);
        rotateLowBallButton.whenPressed(new RotateTo(50, 2));

        // Right Bumper Button - Cargo + Human Player Station
        rotateBallCargoButton = new JoystickButton(opStick, 6);
        rotateBallCargoButton.whenPressed(new RotateTo(40, 6));

        pivotLeftButton = new JoystickButton(driveStick, 3);
        pivotLeftButton.whileHeld(new Turn(-0.5));

        pivotRightButton = new JoystickButton(driveStick, 4);
        pivotRightButton.whileHeld(new Turn(0.5));

        /*
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        opStick = new Joystick(1);
        
        collectCargoButton = new JoystickButton(opStick, 4);
        collectCargoButton.whileHeld(new Roll());
        shootCargoButton = new JoystickButton(opStick, 3);
        shootCargoButton.whileHeld(new Roll());
        driveStick = new Joystick(0);
        
        turnLeftButton = new JoystickButton(driveStick, 3);
        turnLeftButton.whenPressed(new TurnTo(0));
        turnRightButton = new JoystickButton(driveStick, 4);
        turnRightButton.whenPressed(new TurnTo(0));


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    */
    }


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriveStick() {
        return driveStick;
    }

    public Joystick getOpStick() {
        return opStick;
    }

    public boolean otherButtonPressedBesides(int buttonNumber) {
        if(buttonNumber == 1) {
            return opStick.getRawButton(2) || opStick.getRawButton(3) || opStick.getRawButton(4) || opStick.getRawButton(6);
        } else if(buttonNumber == 2) {
            return opStick.getRawButton(1) || opStick.getRawButton(3) || opStick.getRawButton(4) || opStick.getRawButton(6);
        } else if(buttonNumber == 3) {
            return opStick.getRawButton(1) || opStick.getRawButton(2) || opStick.getRawButton(4) || opStick.getRawButton(6);
        } else if(buttonNumber == 4) {
            return opStick.getRawButton(1) || opStick.getRawButton(2) || opStick.getRawButton(3) || opStick.getRawButton(6);
        } else if(buttonNumber == 6) {
            return opStick.getRawButton(1) || opStick.getRawButton(2) || opStick.getRawButton(3) || opStick.getRawButton(4);
        }
        return true;
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

